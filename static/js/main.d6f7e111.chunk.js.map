{"version":3,"sources":["components/Cards/Cards.module.css","Api/index.js","components/Cards/Cards.js","components/CountryPicker/CountryPicker.js","components/Chart/Chart.js","images/covidImage.png","App.js","reportWebVitals.js","index.js","App.module.css","components/Chart/Chart.module.css"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","requiredData","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","dailyDataStats","map","total","date","reportDate","fetchContriesData","countries","countriesList","name","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","CountryPicker","handleCountryChange","useState","countriesData","setCountriesData","useEffect","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","index","Chart","caseData","dailyData","setDailyData","getDailyData","lineChart","labels","datasets","label","backgroundColor","borderColor","fill","barChart","options","legend","display","title","text","App","setCaseData","setCountry","fetchedDataGlobal","fetchedData","dataFetched","image","src","covidImage","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,wJCC7JC,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACjBC,EAAgBJ,EACjBE,IACCE,EAAa,UAAMJ,EAAN,sBAAuBE,IAHnB,kBAMMG,IAAMC,IAAIF,GANhB,uBAMTG,EANS,EAMTA,KAEFC,EAAe,CACjBC,UAAWF,EAAKE,UAChBC,UAAWH,EAAKG,UAChBC,OAAQJ,EAAKI,OACbC,WAAYL,EAAKK,YAZJ,kBAcVJ,GAdU,kCAiBjBK,QAAQC,IAAR,MAjBiB,0DAAH,sDAqBTC,EAAc,uCAAG,gCAAAZ,EAAA,+EAECE,IAAMC,IAAN,UAAaN,EAAb,WAFD,uBAEdO,EAFc,EAEdA,KAEFS,EAAiBT,EAAKU,KAAI,SAACV,GAAD,MAAW,CACvCE,UAAWF,EAAKE,UAAUS,MAC1BP,OAAQJ,EAAKI,OAAOO,MACpBC,KAAMZ,EAAKa,WACXV,UAAWH,EAAKG,UAAUQ,UARR,kBAUfF,GAVe,gCAatBH,QAAQC,IAAR,MAbsB,yDAAH,qDAiBdO,EAAiB,uCAAG,gCAAAlB,EAAA,+EAEYE,IAAMC,IAAN,UAAaN,EAAb,eAFZ,uBAETsB,EAFS,EAEjBf,KAAQe,UAEVC,EAAgBD,EAAUL,KAAI,SAACf,GAAD,OAAaA,EAAQsB,QAJhC,kBAMlBD,GANkB,gCAWzBV,QAAQC,IAAR,MAXyB,yDAAH,qD,8FCyBfW,MA7Df,YAA0B,IAATlB,EAAQ,EAARA,KAGb,OAEQ,qBAAKmB,UAAWC,IAAOC,UAAvB,SACI,eAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,SAApC,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,UAA7E,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,sBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACI,cAAC,IAAD,CACIC,MAAO,EACPC,IAAKvC,EAAKE,UAAUsC,MACpBC,SAAU,EACVC,UAAU,QAGlB,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAK3C,EAAKK,YAAYuC,iBAC7D,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,qDAKR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOjB,WAA7E,SACI,eAAC8B,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,uBACA,eAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,cAA0B,cAAC,IAAD,CACtBC,MAAO,EACPC,IAAKvC,EAAKG,UAAUqC,MACpBC,SAAU,EACVC,UAAU,SAGd,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAK3C,EAAKK,YAAYuC,iBAC7D,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,wDAKR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOhB,QAA7E,SACI,eAAC6B,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,oBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SAAyB,cAAC,IAAD,CACrBC,MAAO,EACPC,IAAKvC,EAAKI,OAAOoC,MACjBC,SAAU,EACVC,UAAU,QAGd,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAK3C,EAAKK,YAAYuC,iBAC7D,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,uD,mCCvBbQ,MAxBf,YAAiD,IAAxBC,EAAuB,EAAvBA,oBAErB,EAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAYA,OATAC,qBAAU,WAAM,4CACZ,sBAAAtD,EAAA,kEAEIqD,EAFJ,SAE2BnC,IAF3B,8EADY,uBAAC,WAAD,wBAKZqC,KACD,IAIC,cAACC,EAAA,EAAD,CAAajC,UAAWC,IAAOiC,YAA/B,SACI,eAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAKX,EAAoBW,EAAEC,OAAOlB,QAA3E,UACI,wBAAQA,MAAM,SAAd,qBACCQ,EAActC,KAAI,SAACf,EAASgE,GAAV,OAAoB,wBAAoBnB,MAAO7C,EAA3B,SAAqCA,GAAxBgE,Y,yBCmDrDC,MAvEf,YAAyC,IAAxBC,EAAuB,EAAvBA,SAAUlE,EAAa,EAAbA,QAEvB,EAAkCoD,mBAAS,IAA3C,mBAAOe,EAAP,KAAkBC,EAAlB,KAEAb,qBAAU,WAAM,4CACZ,sBAAAtD,EAAA,kEACImE,EADJ,SACuBvD,IADvB,8EADY,uBAAC,WAAD,wBAIZwD,KAED,IAEH,IAAMC,EACFH,EACA,cAAC,IAAD,CAEI9D,KAAM,CACFkE,OAAQJ,EAAUpD,KAAI,qBAAGE,QACzBuD,SAAU,CAAC,CACPnE,KAAM8D,EAAUpD,KAAI,qBAAGR,aACvBkE,MAAO,WACPC,gBAAiB,oBACjBC,YAAa,UACbC,MAAM,GACP,CACCvE,KAAM8D,EAAUpD,KAAI,qBAAGN,UACvBgE,MAAO,SACPE,YAAa,MACbD,gBAAiB,oBACjBE,MAAM,GAEV,CACIvE,KAAM8D,EAAUpD,KAAI,qBAAGP,aACvBiE,MAAO,YACPE,YAAa,QACbD,gBAAiB,oBACjBE,MAAM,OAIZ,KAEJC,EACFX,EACA,cAAC,IAAD,CACI7D,KAAM,CACFkE,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CAAC,CACPC,MAAO,SACPC,gBAAiB,CACb,oBACA,oBACA,qBAGJrE,KAAM,CAAC6D,EAAS3D,UAAUsC,MAAOqB,EAAS1D,UAAUqC,MAAOqB,EAASzD,OAAOoC,UAGnFiC,QAAS,CACLC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAsBlF,OAEpD,KAEV,OACI,qBAAKwB,UAAWC,IAAOC,UAAvB,SACgB,WAAX1B,EAAsB6E,EAAWP,KC1E/B,MAA0B,uCC2D1Ba,MAhDf,WAEE,MAAgC/B,mBAAS,CACvC7C,UAAW,CAAEsC,MAAO,GACpBrC,UAAW,CAAEqC,MAAO,GACpBpC,OAAQ,CAAEoC,MAAO,KAHnB,mBAAOqB,EAAP,KAAiBkB,EAAjB,KAOA,EAA8BhC,mBAAS,IAAvC,mBAAOpD,EAAP,KAAgBqF,EAAhB,KATa,4CAuBb,WAAmCrF,GAAnC,iBAAAC,EAAA,sEACkCF,IADlC,UACQuF,EADR,OAGiB,WAAZtF,EAHL,gBAIIoF,EAAYE,GACZD,EAAW,UALf,wCAQ8BtF,EAAUC,GARxC,QAQUuF,EARV,OASIH,EAAYG,GACZF,EAAWE,GAVf,6CAvBa,sBAsCb,OA3BAhC,qBAAU,WAAM,4CAEd,4BAAAtD,EAAA,sEAC4BF,IAD5B,OACQwF,EADR,OAGEH,EAAYG,GACZF,EAAW,UAJb,4CAFc,uBAAC,WAAD,wBAQdG,KAEC,IAkBD,sBAAKhE,UAAWC,IAAOC,UAAvB,UACE,qBAAKF,UAAWC,IAAOgE,MAAOC,IAAKC,EAAYC,IAAI,aACnD,cAAE,EAAF,CAAQvF,KAAM6D,IACd,cAAE,EAAF,CAAgBf,oBA1CP,8CA2CT,cAAE,EAAF,CAASe,SAAUA,EAAUlE,QAASA,QC1C7B6F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,mBCfAjG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,wCCA7DD,EAAOC,QAAU,CAAC,UAAY,4B","file":"static/js/main.d6f7e111.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__37x1J\",\"card\":\"Cards_card__22o_Z\",\"infected\":\"Cards_infected__2aQcv\",\"recovered\":\"Cards_recovered__29Y9H\",\"deaths\":\"Cards_deaths__jtTXd\"};","import axios from \"axios\";\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n    try {\r\n        const { data } = await axios.get(changeableUrl);\r\n\r\n        const requiredData = {\r\n            confirmed: data.confirmed,\r\n            recovered: data.recovered,\r\n            deaths: data.deaths,\r\n            lastUpdate: data.lastUpdate\r\n        }\r\n        return requiredData;\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n\r\n        const dailyDataStats = data.map((data) => ({\r\n            confirmed: data.confirmed.total,\r\n            deaths: data.deaths.total,\r\n            date: data.reportDate,\r\n            recovered: data.recovered.total\r\n        }))\r\n        return dailyDataStats;\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const fetchContriesData = async () => {\r\n    try {\r\n        const { data : {countries} } = await axios.get(`${url}/countries`);\r\n\r\n        const countriesList = countries.map((country) => country.name);\r\n        \r\n        return countriesList;\r\n\r\n\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}","import styles from './Cards.module.css';\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\n\r\nfunction Cards({ data }) {\r\n\r\n\r\n    return (\r\n        \r\n            <div className={styles.container}>\r\n                <Grid container spacing={3} justify='center'>\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)} >\r\n                        <CardContent>\r\n                            <Typography color='textSecondary' gutterBottom >Infected</Typography>\r\n                            <Typography variant='h5'>{\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={data.confirmed.value}\r\n                                    duration={3}\r\n                                    separator=','\r\n                                />\r\n                            }</Typography>\r\n                            <Typography color='textSecondary'>{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                            <Typography variant='body2'>Number of active cases of Covid-19</Typography>\r\n                        </CardContent>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                        <CardContent>\r\n                            <Typography color='textSecondary' gutterBottom >Recovered</Typography>\r\n                            <Typography variant='h5'> <CountUp\r\n                                start={0}\r\n                                end={data.recovered.value}\r\n                                duration={3}\r\n                                separator=','\r\n                            />\r\n                            </Typography>\r\n                            <Typography color='textSecondary'>{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                            <Typography variant='body2'>Number of recovered cases of Covid-19</Typography>\r\n                        </CardContent>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                        <CardContent>\r\n                            <Typography color='textSecondary' gutterBottom >Deaths</Typography>\r\n                            <Typography variant='h5'><CountUp\r\n                                start={0}\r\n                                end={data.deaths.value}\r\n                                duration={3}\r\n                                separator=','\r\n                            />\r\n                            </Typography>\r\n                            <Typography color='textSecondary'>{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                            <Typography variant='body2'>Number of deaths from Covid-19</Typography>\r\n                        </CardContent>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Cards;","import { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchContriesData } from \"../../Api\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\n\r\n\r\nfunction CountryPicker({ handleCountryChange }) {\r\n\r\n    const [countriesData, setCountriesData] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        async function fetchCountries() {\r\n\r\n            setCountriesData(await fetchContriesData())\r\n        }\r\n        fetchCountries();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue='' onChange={(e)=>{handleCountryChange(e.target.value)}}>\r\n                <option value='global'>Global </option>\r\n                {countriesData.map((country, index) => <option key={index} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default CountryPicker;","import { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../Api\";\r\n\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\n\r\nfunction Chart({ caseData, country,  }) {\r\n   \r\n    const [dailyData, setDailyData] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        async function getDailyData() {\r\n            setDailyData(await fetchDailyData())\r\n        }\r\n        getDailyData();\r\n\r\n    }, [])\r\n    \r\n    const lineChart = (\r\n        dailyData ? ( \r\n        <Line\r\n\r\n            data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    backgroundColor: 'rgba(0,0,255,0.3)',\r\n                    borderColor: '#3333ff',\r\n                    fill: true\r\n                }, {\r\n                    data: dailyData.map(({ deaths }) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255,0,0,0.3)',\r\n                    fill: true\r\n                },\r\n                {\r\n                    data: dailyData.map(({ recovered }) => recovered),\r\n                    label: 'Recovered',\r\n                    borderColor: 'green',\r\n                    backgroundColor: 'rgba(0,255,0,0.3)',\r\n                    fill: true\r\n                }]\r\n            }}\r\n\r\n        />) : null )\r\n\r\n    const barChart = (\r\n        caseData ? ( \r\n        <Bar\r\n            data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{\r\n                    label: 'people',\r\n                    backgroundColor: [\r\n                        'rgba(0,0,255,0.3)',\r\n                        'rgba(0,255,0,0.3)',\r\n                        'rgba(255,0,0,0.3)'\r\n\r\n                    ],\r\n                    data: [caseData.confirmed.value, caseData.recovered.value, caseData.deaths.value]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend: { display: false },\r\n                title: { display: true, text: `current state in ${country}` }\r\n            }}\r\n        />) : null )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country !=='global' ? barChart : lineChart}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;","export default __webpack_public_path__ + \"static/media/covidImage.9e5d4fc7.png\";","\nimport styles from './App.module.css';\n\nimport { fetchData } from './Api';\nimport { useEffect, useState } from 'react';\nimport Cards from './components/Cards/Cards';\nimport CountryPicker from './components/CountryPicker/CountryPicker';\nimport Chart from './components/Chart/Chart';\nimport covidImage from './images/covidImage.png';\n\n\nfunction App() {\n\n  const [caseData, setCaseData] = useState({\n    confirmed: { value: 0 },\n    recovered: { value: 0 },\n    deaths: { value: 0 },\n\n  });\n\n  const [country, setCountry] = useState('');\n\n  useEffect(() => {\n\n    async function dataFetched() {\n      const fetchedData = await fetchData();\n\n      setCaseData(fetchedData);\n      setCountry('global')\n    }\n    dataFetched();\n\n  }, []);\n\n  async function handleCountryChange(country) {\n    const fetchedDataGlobal = await fetchData();\n    \n    if(country === 'global'){\n      setCaseData(fetchedDataGlobal)\n      setCountry('global')\n    }\n    else{\n      const fetchedData = await fetchData(country);\n      setCaseData(fetchedData)\n      setCountry(fetchedData)\n    }\n    \n  }\n\n  return (\n    <div className={styles.container}>\n      <img className={styles.image} src={covidImage} alt='Covid-19'  />\n      < Cards data={caseData} />\n      < CountryPicker handleCountryChange={handleCountryChange} />\n      < Chart  caseData={caseData} country={country}  />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3-5TL\",\"image\":\"App_image__3m1ib\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__96e-7\"};"],"sourceRoot":""}